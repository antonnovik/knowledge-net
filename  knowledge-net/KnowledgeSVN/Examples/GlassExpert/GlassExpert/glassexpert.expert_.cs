//This file was generated by Knowledge.NET Cross-Compiler ver. 1.0.2512.18603
using System;
using Knowledge.Library;
using System;

namespace ConsoleApplication3
{
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	class GlassExpert
	{
		/// <summary>
		/// 
		/// </summary>
		/// <param name="comment">Takes a value from the console</param>
		/// <param name="maxValue">sets maximum allowed value</param>
		/// <returns>entered value</returns>
		public static int getInt (string text, int maxValue)
		{
			Console.Write (text);
			string result=Console.ReadLine();
			try
			{
				int intResult = Convert.ToInt32(result);
				if (intResult <= 0 || intResult > maxValue)
				{
					Console.WriteLine ("The value must be in the range from 1 to {0}, try again...", maxValue);
					return getInt (text, maxValue);
				}
				return intResult;
			}
			catch
			{
				Console.WriteLine ("Wrong value, entered value must be integer, try again...");
				return getInt(text, maxValue);
			}
		}
		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main(string[] args)
		{
			int result=1;
			while (result == 1)
			{
				CSharpExpert.firstStart();
				
				Console.WriteLine("Show comments during consultation: ");
				Console.WriteLine("\t1 -- yes");
				Console.WriteLine("\t2 -- no");
				ProductionSystem.showComments = (getInt("Enter a value from 1 to 2: ", 2) == 1)? true : false;

				Console.Out.WriteLine("Type of grain: ");
				Console.Out.WriteLine("\t1 -- very coarse grain");
				Console.Out.WriteLine("\t2 -- coarse grain");
				Console.Out.WriteLine("\t3 -- medium grain");
				Console.Out.WriteLine("\t4 -- fine grain");
				Console.Out.WriteLine("\t5 -- very fine grain");
				(CSharpExpert.getDataFrame("Grain").getSlot("grains")).slotValue = getInt ("Enter a value from 1 to 5: ", 5);

				Console.Out.WriteLine("Humidity of the charge: ");
				Console.Out.WriteLine("\t1 -- dry");
				Console.Out.WriteLine("\t2 -- normal");
				Console.Out.WriteLine("\t3 -- very wet");
				(CSharpExpert.getDataFrame("Charge").getSlot("humidity")).slotValue = getInt ("Enter a value from 1 to 3: ", 3);

				Console.Out.WriteLine("Gas amount in the charge");
				Console.Out.WriteLine("\t1 -- low");
				Console.Out.WriteLine("\t2 -- less than normal");
				Console.Out.WriteLine("\t3 -- normal");
				Console.Out.WriteLine("\t4 -- more than normal");
				Console.Out.WriteLine("\t5 -- high");
				(CSharpExpert.getDataFrame("Charge").getSlot("gasAmount")).slotValue = getInt ("Enter a value from 1 to 5: ", 5);
				//
				QualityOfGlass.Quality quality = QualityOfGlass.Quality.undefined;
				QualityOfGlass ruleset1 = (QualityOfGlass)CSharpExpert.getRulesetFrame("QualityOfGlass");
				ruleset1.initContext();
				ruleset1.initParameters(quality);
				ProductionSystem.consult ("QualityOfGlass");
			
				ruleset1.getRefValues(ref quality);
				Console.WriteLine("~~~~~~Result~~~~~~");
				Console.WriteLine("quartzous grains: {0}", (Glass.GrainType)(CSharpExpert.getDataFrame("Glass").getSlot("grainsAmount")).slotValue);
				Console.WriteLine("streakiness: {0}", (Glass.StreakinessType)(CSharpExpert.getDataFrame("Glass").getSlot("streakiness")).slotValue);
				Console.WriteLine("clearing: {0}", (Glass.ClearingType)(CSharpExpert.getDataFrame("Glass").getSlot("clearing")).slotValue);
				Console.WriteLine("foaming: {0}", (Glass.FoamingType)(CSharpExpert.getDataFrame("Glass").getSlot("foaming")).slotValue);
				Console.WriteLine("homogeneity of the charge: {0}", (Glass.HomogeneityType)(CSharpExpert.getDataFrame("Glass").getSlot("homogeneity")).slotValue);
				Console.WriteLine("QUALITY ESTIMATION: {0}", quality);

				Console.WriteLine();
				Console.WriteLine("1 -- one more consultation");
				Console.WriteLine("2 -- exit");
				result = getInt("Enter a value from 1 to 2: ", 2);
			}

		}
	}
}


#region Knowledge.NET generated code
[Serializable]
public class CSharpExpert : CSharpExpertAbstract
{
	protected override void createFrames()
	{
		base.createFrames();
// *** Data frames
		dataFrames.Add ("Charge", new Charge());
		dataFrames.Add ("Glass", new Glass());
		dataFrames.Add ("Grain", new Grain());
// *** End of data frames

// *** Rulesets
		rulesetFrames.Add ("QualityOfGlass", new QualityOfGlass());
// *** End of rulesets

	}
	private static CSharpExpertAbstract createInstance()
	{
		instance = new CSharpExpert();
		return instance;
	}
	public static void firstStart()
	{
		createInstance();
		firstStartAbstract();
	}
}
public class Charge : ClassFrame
{
	//Attributes
	public enum HumidityType
	{
		dry=1,
		normal,
		wet,
		undefined
	};

	public enum GasAmountType
	{
		low=1,
		lessThanNormal,
		normal,
		moreThanNormal,
		high,
		undefined
	};
	
	
	public Charge()
	{
		//Initialization isA
	}
	public override void resetSlots()
	{
		// Initialization of slots
		CSharpExpert.addSlot("Charge.gasAmount", new Slot(Charge.GasAmountType.undefined));
		CSharpExpert.addSlot("Charge.humidity", new Slot(Charge.HumidityType.undefined));
		// Initialization of default values for instance slots
	}
	public override string getName()
	{
		return "Charge";
	}
}
public class Glass : ClassFrame
{
	//Attributes
	public enum GrainType {absent, present, undefined};
   public enum StreakinessType {none, few, considerable, undefined};
   public enum ClearingType {bad, poor, good, undefined};
   public enum FoamingType {none, low, high, undefined};
   public enum HomogeneityType {homogeneous, heterogeneous, veryHeterogeneous, undefined};
	
	
	public Glass()
	{
		//Initialization isA
	}
	public override void resetSlots()
	{
		// Initialization of slots
		CSharpExpert.addSlot("Glass.clearing", new Slot(Glass.ClearingType.undefined));
		CSharpExpert.addSlot("Glass.foaming", new Slot(Glass.FoamingType.undefined));
		CSharpExpert.addSlot("Glass.grainsAmount", new Slot(Glass.GrainType.undefined));
		CSharpExpert.addSlot("Glass.homogeneity", new Slot(Glass.HomogeneityType.undefined));
		CSharpExpert.addSlot("Glass.streakiness", new Slot(Glass.StreakinessType.undefined));
		// Initialization of default values for instance slots
	}
	public override string getName()
	{
		return "Glass";
	}
}
public class Grain : ClassFrame
{
	//Attributes
	public enum GrainType
	{
        veryCoarse=1,
		coarse,
		medium,
		fine,
		veryFine,
		undefined
	};

	
	public Grain()
	{
		//Initialization isA
	}
	public override void resetSlots()
	{
		// Initialization of slots
		CSharpExpert.addSlot("Grain.grains", new Slot(Grain.GrainType.undefined));
		// Initialization of default values for instance slots
	}
	public override string getName()
	{
		return "Grain";
	}
}
public class QualityOfGlass : RulesetFrame
{
	
	public enum Quality {good, bad, undefined};
	
	// Parameters of the ruleset
	private static QualityOfGlass.Quality quality;

	private class R01 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Glass.ClearingType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("clearing")).slotValue == Glass.ClearingType.good 
				&& (Glass.StreakinessType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("streakiness")).slotValue == Glass.StreakinessType.none 
				&& (Glass.GrainType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("grainsAmount")).slotValue == Glass.GrainType.absent;
		}
		public override void if_statement()
		{
				quality = Quality.good;
			}
			
		public override string getComment()
		{
			return "Oi?ioaa inaaoeaieau ionoonoaea iieinoiinoe e ca?ai a noaeea aiai?eo i aai oi?ioai ea?anoaa" ;
		}
		public override string getName()
		{
			return "R01";
		}
	}

	private class R02 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Glass.GrainType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("grainsAmount")).slotValue == Glass.GrainType.present;
		}
		public override void if_statement()
		{
				quality = Quality.bad;
			}
			
		public override string getComment()
		{
			return "Iaee?ea eaa?oaauo ca?ai oeacuaaao ia iaea?anoaaiiinou noaeea" ;
		}
		public override string getName()
		{
			return "R02";
		}
	}

	private class R03 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Glass.StreakinessType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("streakiness")).slotValue == Glass.StreakinessType.few ||
				(Glass.StreakinessType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("streakiness")).slotValue == Glass.StreakinessType.considerable;
		}
		public override void if_statement()
		{
				quality = Quality.bad;
			}
			
		public override string getComment()
		{
			return "Iaeay eee cia?eoaeuiay iieiniinou noaeea aiai?eo i aai iaea?anoaaiiinoe" ;
		}
		public override string getName()
		{
			return "R03";
		}
	}

	private class R04 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Glass.ClearingType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("clearing")).slotValue == Glass.ClearingType.bad || (Glass.ClearingType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("clearing")).slotValue == Glass.ClearingType.poor;
		}
		public override void if_statement()
		{
				quality = Quality.bad;				
			}
			
		public override string getComment()
		{
			return "Ieioia eee oaiaeaoai?eoaeuiia inaaoeaiea noaeea oeacuaaao ia aai iaea?anoaaiiinou" ;
		}
		public override string getName()
		{
			return "R04";
		}
	}

	private class R05 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Grain.GrainType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("grains")).slotValue == Grain.GrainType.veryCoarse;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("grainsAmount")).slotValue = Glass.GrainType.present;
			}
			
		public override string getComment()
		{
			return "I?aiu e?oiiue ca?iiaie ninoaa ianea aaaao   e iiyaeaie? eaa?oaauo ca?ai a noaeea" ;
		}
		public override string getName()
		{
			return "R05";
		}
	}

	private class R06 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Grain.GrainType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("grains")).slotValue == Grain.GrainType.veryCoarse || (Grain.GrainType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("grains")).slotValue == Grain.GrainType.coarse;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("homogeneity")).slotValue = Glass.HomogeneityType.veryHeterogeneous; 
			}
			
		public override string getComment()
		{
			return "E?oiiue eee i?aiu e?oiiue ca?iiaie ninoaa ianea aaaao e oiio, ?oi oeooa iieo?aaony i?aiu iaiaii?iaiie" ;
		}
		public override string getName()
		{
			return "R06";
		}
	}

	private class R07 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Grain.GrainType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("grains")).slotValue == Grain.GrainType.medium || (Grain.GrainType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("grains")).slotValue == Grain.GrainType.fine;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("homogeneity")).slotValue = Glass.HomogeneityType.heterogeneous;
			}
			
		public override string getComment()
		{
			return "N?aaiee eee iaeeee ca?iiaie ninoaa ianea aaaao e iaiaii?iaiinoe oeoou" ;
		}
		public override string getName()
		{
			return "R07";
		}
	}

	private class R08 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Grain.GrainType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("grains")).slotValue == Grain.GrainType.veryFine && 
				((Charge.HumidityType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("humidity")).slotValue == Charge.HumidityType.normal || (Charge.HumidityType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("humidity")).slotValue == Charge.HumidityType.wet);
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("homogeneity")).slotValue = Glass.HomogeneityType.homogeneous;				
			}
			
		public override string getComment()
		{
			return "I?aiu iaeeee ca?iiaie ninoaa ianea aaao iaii?iaio? oeooo" ;
		}
		public override string getName()
		{
			return "R08";
		}
	}

	private class R09 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Glass.HomogeneityType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("homogeneity")).slotValue == Glass.HomogeneityType.homogeneous &&
				(Glass.FoamingType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("foaming")).slotValue == Glass.FoamingType.none;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("streakiness")).slotValue = Glass.StreakinessType.none;				
			}
			
		public override string getComment()
		{
			return "Iaii?iaiinou oeoou i?e ionoonoaee aniaieaaiey ia aaao iieiniinoe noaeea" ;
		}
		public override string getName()
		{
			return "R09";
		}
	}

	private class R10 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Glass.HomogeneityType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("homogeneity")).slotValue == Glass.HomogeneityType.heterogeneous;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("streakiness")).slotValue = Glass.StreakinessType.few;
			}
			
		public override string getComment()
		{
			return "Iaiaii?iaiinou oeoou aaaao e iaeie iieiniinoe noaeea" ;
		}
		public override string getName()
		{
			return "R10";
		}
	}

	private class R11 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Glass.HomogeneityType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("homogeneity")).slotValue == Glass.HomogeneityType.veryHeterogeneous;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("streakiness")).slotValue = Glass.StreakinessType.considerable;
			}
			
		public override string getComment()
		{
			return "I?aiu iaiaii?iaiay oeooa aaaao e cia?eoaeuiie iieiniinoe noaeea" ;
		}
		public override string getName()
		{
			return "R11";
		}
	}

	private class R12 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Charge.HumidityType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("humidity")).slotValue == Charge.HumidityType.dry;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("homogeneity")).slotValue = Glass.HomogeneityType.heterogeneous;
			}
			
		public override string getComment()
		{
			return "Nooinou oeooa aaeaao aa iaiaii?iaiie" ;
		}
		public override string getName()
		{
			return "R12";
		}
	}

	private class R13 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Charge.HumidityType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("humidity")).slotValue == Charge.HumidityType.wet;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("gasAmount")).slotValue = Charge.GasAmountType.high;
			}
			
		public override string getComment()
		{
			return "Aunieay aea?iinou oeoou aaaao e iiauoaiiiio niaa??aie? aacia a iae" ;
		}
		public override string getName()
		{
			return "R13";
		}
	}

	private class R14 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Charge.GasAmountType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("gasAmount")).slotValue == Charge.GasAmountType.low ||
			   (Charge.GasAmountType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("gasAmount")).slotValue == Charge.GasAmountType.high;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("clearing")).slotValue = Glass.ClearingType.bad;
			}
			
		public override string getComment()
		{
			return "Iaeia eee aunieia niaa??aiea aacia a oeooa i?eaiaeo e ieioiio inaaoeaie? noaeea" ;
		}
		public override string getName()
		{
			return "R14";
		}
	}

	private class R15 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Charge.GasAmountType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("gasAmount")).slotValue == Charge.GasAmountType.lessThanNormal ||
			   (Charge.GasAmountType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("gasAmount")).slotValue == Charge.GasAmountType.moreThanNormal;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("clearing")).slotValue = Glass.ClearingType.poor;
			}
			
		public override string getComment()
		{
			return "Niaa??aiea aacia a oeooa ie?a eee auoa ii?iu i?eaiaeo e oaiaeaoai?eoaeuiiio inaaoeaie? noaeea" ;
		}
		public override string getName()
		{
			return "R15";
		}
	}

	private class R16 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Charge.GasAmountType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("gasAmount")).slotValue == Charge.GasAmountType.normal;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("clearing")).slotValue = Glass.ClearingType.good;
			}
			
		public override string getComment()
		{
			return "Ii?iaeuiia niaa??aiea aacia a oeooa aaaao e oi?ioaio inaaoeaie? noaeea" ;
		}
		public override string getName()
		{
			return "R16";
		}
	}

	private class R17 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Charge.GasAmountType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("gasAmount")).slotValue == Charge.GasAmountType.low ||
			   (Charge.GasAmountType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("gasAmount")).slotValue == Charge.GasAmountType.lessThanNormal ||
			   (Charge.GasAmountType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("gasAmount")).slotValue == Charge.GasAmountType.normal;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("foaming")).slotValue = Glass.FoamingType.none;
			}
			
		public override string getComment()
		{
			return "Ii?iaeuiia eee iaeia niaa??aiea aacia a oeooa ia i?eaiaeo e aniaieaaie? noaeeiiannu" ;
		}
		public override string getName()
		{
			return "R17";
		}
	}

	private class R18 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Charge.GasAmountType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("gasAmount")).slotValue == Charge.GasAmountType.moreThanNormal;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("foaming")).slotValue = Glass.FoamingType.low;
			}
			
		public override string getComment()
		{
			return "Iacia?eoaeuiia i?aauoaiea ii?iu niaa??aiey aacia a oeooa i?eaiaeo e iaeiio aniaieaaie? noaeeiiannu" ;
		}
		public override string getName()
		{
			return "R18";
		}
	}

	private class R19 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Charge.GasAmountType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("gasAmount")).slotValue == Charge.GasAmountType.high;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("foaming")).slotValue = Glass.FoamingType.high;
			}
			
		public override string getComment()
		{
			return "Aunieia niaa??aiea aacia a oeooa i?eaiaeo e neeuiiio aniaieaaie? noaeeiiannu" ;
		}
		public override string getName()
		{
			return "R19";
		}
	}

	private class R20 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Glass.FoamingType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("foaming")).slotValue == Glass.FoamingType.low;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("streakiness")).slotValue = Glass.StreakinessType.few;
			}
			
		public override string getComment()
		{
			return "Iaeia aniaieaaiea noaeeiiannu aaaao e iiyaeaie? iaeie iieiniinoe noaeea" ;
		}
		public override string getName()
		{
			return "R20";
		}
	}

	private class R21 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Glass.FoamingType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("foaming")).slotValue == Glass.FoamingType.high;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("streakiness")).slotValue = Glass.StreakinessType.considerable;				
			}
			
		public override string getComment()
		{
			return "Neeuiia aniaieaaiea noaeeiiannu aaaao e cia?eoaeuiie iieiniinoe noaeea" ;
		}
		public override string getName()
		{
			return "R21";
		}
	}

	private class R22 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Glass.FoamingType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("foaming")).slotValue == Glass.FoamingType.none || (Glass.FoamingType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("foaming")).slotValue == Glass.FoamingType.low;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("grainsAmount")).slotValue = Glass.GrainType.absent;
			}
			
			
		public override string getComment()
		{
			return "Ionoonoaea eee iaeue o?iaaiu aniaieaaiey noaeeiiannu ia i?eaaaao e iiyaeaie? ca?ai eaa?oa a noaeea" ;
		}
		public override string getName()
		{
			return "R22";
		}
	}

	private class R23 : Knowledge.Library.Rule
	{
		public override bool condition()
		{
			return (Glass.FoamingType)(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("foaming")).slotValue == Glass.FoamingType.high;
		}
		public override void if_statement()
		{
				(CSharpExpert.getRulesetFrame("QualityOfGlass").getSlot("grainsAmount")).slotValue = Glass.GrainType.present;
			}
			
		public override string getComment()
		{
			return "Neeuiia aniaieaaiea noaeeiiannu aaaao e iaee?e? ca?ai eaa?oa a noaeea" ;
		}
		public override string getName()
		{
			return "R23";
		}
	}

	public QualityOfGlass() : base()
	{
		goal = "quality";
		
		context.Add("Charge", new ContextParam("Charge", false));
		context.Add("Glass", new ContextParam("Glass", false));
		context.Add("Grain", new ContextParam("Grain", false));
		rules.Add("R01", new R01());
		rules.Add("R02", new R02());
		rules.Add("R03", new R03());
		rules.Add("R04", new R04());
		rules.Add("R05", new R05());
		rules.Add("R06", new R06());
		rules.Add("R07", new R07());
		rules.Add("R08", new R08());
		rules.Add("R09", new R09());
		rules.Add("R10", new R10());
		rules.Add("R11", new R11());
		rules.Add("R12", new R12());
		rules.Add("R13", new R13());
		rules.Add("R14", new R14());
		rules.Add("R15", new R15());
		rules.Add("R16", new R16());
		rules.Add("R17", new R17());
		rules.Add("R18", new R18());
		rules.Add("R19", new R19());
		rules.Add("R20", new R20());
		rules.Add("R21", new R21());
		rules.Add("R22", new R22());
		rules.Add("R23", new R23());
	}

	public void initParameters (QualityOfGlass.Quality quality)
	{
		isParamsInitialized = true;
		QualityOfGlass.quality=quality;
	}
	public void getRefValues(ref QualityOfGlass.Quality quality)
	{
		quality=QualityOfGlass.quality;
	}
	public void initContext()
	{
		base._initContext();
	}
	public override ComparableDict getParams()
	{
		ComparableDict dict = base.getParams();
		object paramValue = null;
		paramValue=quality;
		if (quality is ICloneable)
			paramValue=((ICloneable)(object)quality).Clone();
		dict.Add("quality", paramValue);
		
		return dict;
	}

	public override string getName()
	{
		return "QualityOfGlass";
	}
}
#endregion
