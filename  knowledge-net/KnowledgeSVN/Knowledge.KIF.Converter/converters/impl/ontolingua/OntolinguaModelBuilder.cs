/*
 * Created by: M. Sigalin
 * Created: Thursday, October 26, 2006
 */

using System;
using System.Collections;
using Knowledge.KIF.Converter.model;
using Knowledge.KIF.Converter.model.kif;
using Knowledge.KIF.Converter.model.ontolingua;

namespace Knowledge.KIF.Converter.converters.impl.ontolingua {
    public class OntolinguaModelBuilder : IModelBuilder {
        private OntolinguaModel _model;

        public OntolinguaModelBuilder() {
            _model = new OntolinguaModel();
            _model.addObject(new KifComment("Generated by Knowledge.NET KIFConverter"));
        }

        public IModel getModel() {
            return _model;
        }

        protected void createSlot(string frameName, Slot slot) {
            KifIndividualVariable frameVar = new KifIndividualVariable("Frame");
            KifIndividualVariable valueVar = new KifIndividualVariable("Value");

            KifSequence<KifIndividualVariable> args = new KifSequence<KifIndividualVariable>(frameVar);
            args.addItem(valueVar);
            OntolinguaDefineRelation relation = new OntolinguaDefineRelation(slot.iden, null, args);
            KifSequence<KifSentence> conjs = new KifSequence<KifSentence>();
            conjs.addItem(
                new KifRelationalSentence(new KifConstant(frameName),
                                          new KifConcreteTerm<KifIndividualVariable>(frameVar)));
            conjs.addItem(
                new KifRelationalSentence(new KifConstant(slot.slotType),
                                          new KifConcreteTerm<KifIndividualVariable>(valueVar)));
 

            relation.DefSentence = new KifConjunction(conjs);
            _model.addObject(relation);
        }

        protected void createSlots(DataFrame frame) {
            foreach (Slot slot in frame.ownSlots.Values) {
                createSlot(frame.iden, slot);
            }
        }

        protected KifConjunction processingParentsXXX(DataFrame frame) {
            KifSequence<KifSentence> conjs = new KifSequence<KifSentence>();
            IList isA = frame.isA;
            if (isA.Count == 0) {
                isA = new ArrayList();
                isA.Add("Thing"); //TODO:
            }
            foreach (string parentName in isA) {
                conjs.addItem(
                    new KifRelationalSentence(new KifConstant(parentName),
                                              new KifConcreteTerm<KifIndividualVariable>(new KifIndividualVariable("X"))));
            }
            foreach (Slot slot in frame.ownSlots.Values) {
                if (!"".Equals(slot.slotValue)) {
                    conjs.addItem(
                        new KifRelationalSentence(new KifConstant(slot.iden),
                                                  new KifConcreteTerm<KifConstant>(new KifConstant(slot.slotValue))));
                }
            }
            return new KifConjunction(conjs);
        }

        protected Comment generateFrameComment(DataFrame frame) {
            if (frame.frameType != DataFrame.FrameTypes.instanceFrame)
                return new Comment("Class frame " + frame.iden);
            return new Comment("Instance frame " + frame.iden);
        }

        public void createClassFrame(DataFrame frame) {
            OntolinguaDefineClass defineClass =
                new OntolinguaDefineClass(frame.iden, generateFrameComment(frame), new KifIndividualVariable("X"));//TODO: constant

            defineClass.DefSentence = processingParentsXXX(frame);

            _model.addObject(defineClass);
            createSlots(frame);
        }

        public void createInstanceFrame(DataFrame frame) {
            //  throw new NotImplementedException();
        }

        public void createConcept() {
            throw new NotImplementedException();
        }

        public void createProperty() {
            throw new NotImplementedException();
        }

        private Converter _director;
        public void setDirector(Converter converter) {
            _director = converter;
        }
    }
}